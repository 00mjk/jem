#!/bin/bash

# Copyright 2015 Jelastic, Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


JAVA_HOME=$(readlink -f /usr/bin/java | sed "s:bin/java::");
DESCRIPTION="Manipulate keystore certificates";
VERSION="1";
DEFAULT_ACTION="Usage";
SSL_CONFIG_DIR="/var/lib/jelastic/SSL";
$PROGRAM 'wget';
DEFAULT_DOMAIN="jelastic";
$PROGRAM 'openssl';
_OPENSSL=$OPENSSL;
_KEYTOOL="${JAVA_HOME}/bin/keytool";

include output;

function getKeyPass() {
    echo "changeit";
}

function getStoragePass() {
    echo "changeit";
}

function doUsage() {
    showUsageMessage;
}

function checkSSLDirectory(){
    [ ! -d "$SSL_CONFIG_DIR" ] && mkdir -p "$SSL_CONFIG_DIR";
}

function getCommonNameFromCertificate(){
    local common_name=$($OPENSSL x509 -noout -in ${SSL_CONFIG_DIR}/${DEFAULT_DOMAIN}.crt  -subject | grep -i "subject.*CN=.*" | sed -n "s/.*CN=\(.*\)\/.*/\1/p");
    [ ! -z "$common_name" ] && echo "$common_name" || exit 4;
}

function getDNSAltNamesFromCertificate(){
    local dns_alt_names=$($OPENSSL  x509 -text -noout -in ${SSL_CONFIG_DIR}/${DEFAULT_DOMAIN}.crt -subject  | grep -A 1 "Subject Alternative Name" | tail -n 1 |  sed "s/[.\ ]\{0,\}DNS://g");
    [ ! -z "$dns_alt_names" ] && echo "$dns_alt_names" || exit 4;
}

function getExpireDateFromCertificate(){
    local expiredate_raw=$($OPENSSL  x509 -text -noout -in ${SSL_CONFIG_DIR}/${DEFAULT_DOMAIN}.crt  -subject -enddate | grep notAfter | sed 's/^notAfter=//');
    local expiredate=$(date --utc --date="$expiredate_raw" "+%Y-%m-%d %H:%M:%S");
    [ ! -z "$expiredate" ] && echo "$expiredate" || exit 4;
}

function doDownloadKeys(){
        local domain="$DEFAULT_DOMAIN";
        [ -f "${SSL_CONFIG_DIR}/customssl.conf" ] && cp -f "${SSL_CONFIG_DIR}/customssl.conf" "${SSL_CONFIG_DIR}/${domain}.conf";
        source "$SSL_CONFIG_DIR/${domain}.conf";
    	$WGET "$cert" --output-document="$SSL_CONFIG_DIR/${domain}.crt" > /dev/null 2>&1
    	[ -s  "$SSL_CONFIG_DIR/${domain}.crt" ] && {
                cert="$SSL_CONFIG_DIR/${domain}.crt";
                grep -qi "CERTIFICATE" $cert || { writeJSONResponceErr "result=>4011" "message=>Uploaded file isn't a certificate!"; die -q; exit 4011; };
                                                    } || {
                                                            writeJSONResponceErr "result=>4012" "message=>Could not receivce certificate!"; die -q; exit 4012;
                                                          }
    	$WGET "$intermediate" --output-document="$SSL_CONFIG_DIR/${domain}-ca.crt" > /dev/null 2>&1
    	[ -s  "$SSL_CONFIG_DIR/${domain}-ca.crt" ] && {
                intermediate="$SSL_CONFIG_DIR/${domain}-ca.crt";
                grep -qi "CERTIFICATE" "$intermediate" || { writeJSONResponceErr "result=>4011" "message=>Uploaded file isn't a certificate!"; die -q; exit 4011; };
                                                    } || {
                                                            writeJSONResponceErr "result=>4013" "message=>Could not receivce CA certificate"; die -q; exit 4013; };
    	$WGET "$key" --output-document="$SSL_CONFIG_DIR/${domain}.key" > /dev/null 2>&1
    	[ -s  "$SSL_CONFIG_DIR/${domain}.key" ] && {
                key="$SSL_CONFIG_DIR/${domain}.key";
                grep -qi "KEY" "$key" || { writeJSONResponceErr "result=>4015" "message=>Uploaded file isn't a private key!"; die -q; exit 4015; };
                                                    } || { writeJSONResponceErr "result=>4016" "message=>Could not receivce private key!"; die -q; exit 4016; };
        local cert_mod=$(${OPENSSL} x509 -noout -modulus -in ${cert})
        local key_mod=$(${OPENSSL} rsa -noout -modulus -in ${key})
        [[ "${cert_mod}" != "${key_mod}" ]] && {
            writeJSONResponceErr "result=>4014" "message=>Certificate does not match key!";
        return 1;
        }
        return 0;
}

function addSSLToKeystore() {
    [ $# -ne 1 ] && doUsage;
    local domain="$1";
    local tmpfile=$(mktemp);
    local keystore="$SSL_CONFIG_DIR/${domain}.jks"

    #make pkcs12
    $OPENSSL pkcs12 -export -in "$cert" -inkey "$key" -out "$tmpfile" -name "$domain" -caname root -password pass:$(getKeyPass) -certfile "$intermediate" || {  
        return 1;
    }
    ${_KEYTOOL} -importKEYSTORE -deststorepass $(getStoragePass) -destkeypass $(getKeyPass) -destKEYSTORE "$keystore" -srcKEYSTORE "$tmpfile" -srcstoretype PKCS12 -srcstorepass $(getStoragePass) -alias "$domain"  > /dev/null 2>&1 || {
        return 1;
    }
    echo y | ${_KEYTOOL} -import -trustcacerts -alias intermed -file ${intermediate} -KEYSTORE ${keystore} -keypass $(getKeyPass) -storepass $(getStoragePass) > /dev/null 2>&1;
    return $?;
}

function removeSSL(){
    [ $# -ne 1 ] && doUsage;
    local domain="$1";
    [ -d "$SSL_CONFIG_DIR" ] && {
        rm -Rf $SSL_CONFIG_DIR/*.crt;
        rm -Rf $SSL_CONFIG_DIR/*.key;
        rm -Rf $SSL_CONFIG_DIR/*.jks;
    }
}

function doCheck() {
    local  domain=${1} cert_DOMAIN cert_mod key_mod
    cert_DOMAIN=$(${OPENSSL} x509 -noout -text -in ${cert} | grep "Subject.*CN=.*" | sed 's/.*CN=\(.*\)/\1/');
    cert_mod=$(${OPENSSL} x509 -noout -modulus -in ${cert})
    key_mod=$(${OPENSSL} rsa -noout -modulus -in ${key})
    [[ "${domain}" != "${cert_DOMAIN}" ]] && {
	#runIfExists log "invalid domain";
        return 1;
    }
    [[ "${cert_mod}" != "${key_mod}" ]] && {
	#runIfExists log "key did not matching cert";
	return 1;
    }
    return 0;
}

function doInstall(){
    removeSSL "$DEFAULT_DOMAIN";
    doDownloadKeys "$DEFAULT_DOMAIN";
    local domain=$(getCommonNameFromCertificate);
    checkSSLDirectory;
	addSSLToKeystore "$DEFAULT_DOMAIN" ;
}

function doRemove(){
    removeSSL "$DEFAULT_DOMAIN" ;
}

function doCheckDomain(){
    [ -f "${SSL_CONFIG_DIR}/${DEFAULT_DOMAIN}.crt" ] || { writeJSONResponceErr "result=>4010" "message=>No certificates installed"; return 4010; };
    local domain=$(getCommonNameFromCertificate);
    local dns_alt_names=$(getDNSAltNamesFromCertificate 2>/dev/null);
    local expiredate=$(getExpireDateFromCertificate);
    [ ! -z "$dns_alt_names" ] && [  ! -z "$expiredate" ] && { writeJSONResponceOut "result=>0" "domain=>${dns_alt_names}" "expiredate=>${expiredate}"; } || { writeJSONResponceErr "result=>4010" "message=>could not detect valid domain for uploaded certificate"; return 4010; };
}

function describeCheck() {
    echo "Check certificate";
}

function describeCheckDomain() {
    echo "Check domain name for uploaded certificate";
}

function describeDownloadKeys() {
    echo "";
}

function describeInstall() {
    echo "Install ssl keys";
}

function describeRemove() {
    echo "Remove ssl certificate";
}
