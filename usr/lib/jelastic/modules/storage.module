#!/bin/bash

# Copyright 2015 Jelastic, Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.



inherit os output vzexec virtuozzo;
include log;

DESCRIPTION="Manipulate storage mounts inside specified container";
VERSION="1"
DEFAULT_ACTION="Usage";

$PROGRAM "vzctl"
$PROGRAM "vzlist"
$PROGRAM "awk"
$PROGRAM "ifconfig"
$PROGRAM "rsync"
$PROGRAM "grep"
$PROGRAM "tar"

declare -i _CTID=""
declare -i CTID=""
declare -i _MOVEDATA=0
declare _SOURCE=""
declare _DESTINATION=""
declare _DEFAULT_NFS_MOUNT_OPTS="-fstype=nfs,nfsvers=3,nolock,udp,soft,timeo=120,retrans=20,_netdev"
declare CONTAINER_MOUNTS_STORAGE="/etc/autofs.jelastic"
declare _IPLIST
declare -a UNKNOWN_ARG
declare SAVE_CONFIG="true"

declare TRUE=0
declare FALSE=1

FORCE_UMOUNT=$TRUE
FORCE_MOUNT=$FALSE

MOUNTPROG="/usr/sbin/automount"
MOUNTPACKAGE="/var/lib/jelastic/packages/jelastic-nfs-utils.tar.gz"
_UI_RESULT=0
USERID=0
GROUPID=0

EXEC="/bin/bash -c "

function doUsage() {
    showUsageMessage
}

function onModLoadCallback() {
    log "Preload callback";

    ## TODO: remove "params" garbarge option
    local temp=`getopt -o c:,s:,d:,u:,g:,l:,m: -l ctid:,source:,destination:,ip:,uid:,gid:,movedata:,saveconfig::,force:: -- "$@" 2>/dev/null`;
    [[ $? != 0 ]] && die -q "Terminating...";
    eval set -- "$temp";

    while true ; do
        case "$1" in
            --force)
                shift;
                FORCE_UMOUNT=$TRUE
                FORCE_MOUNT=$TRUE
                shift;
                ;;
            --saveconfig)
                shift;
                SAVE_CONFIG=$1
                shift;
                ;;
            -o | --ctid)
                shift;
                _CTID=$1
                CTID=$1
                EXEC="$VZCTL exec2 ${_CTID}"
                vzexecSetCTID ${_CTID}
                shift;
                ;;
            -s | --source)
                shift;
                _SOURCE=$1
                shift;
                ;;
            -d | --destination)
                shift;
                _DESTINATION=$1
                shift;
                ;;
            -l | --ip )
                shift;
                _IPLIST=$1;
                shift;
                ;;
            -m | --movedata)
                shift;
                _MOVEDATA=$1;
                shift;
                ;;
            -u | --uid)
                shift;
                USERID=$1;
                shift;
                ;;
            -g | --gid)
                shift;
                GROUPID=$1;
                shift;
                ;;
            --)
                shift;
                break;
                ;;
        esac;
    done;
    for arg do UNKNOWN_ARG+=("$arg") ; done
    [[ ! -z "${CTID}" ]] && {
        MOUNTS_STORAGE="/vz/root/${CTID}${CONTAINER_MOUNTS_STORAGE}"
    }
    log "${UNKNOWN_ARG[*]}"
}

function _isVirtuozzoInstalled() {
    local vzmainconfig="/etc/sysconfig/vz";
    if [ -f "${vzmainconfig}" ] ; then
        $GREP -qE "VIRTUOZZO=[\s|\"|']*yes[\s|\"|']*" /etc/sysconfig/vz ; return $?;
    fi
    return 1
}

function getTargetIPs() {
    local lctid=$1
    if [ -z ${lctid} ] ; then
        $IFCONFIG | $AWK '/inet addr/{print substr($2,6)}'
    else
        $VZLIST -H -o ctid,ip | $SED -nre "/\s${lctid}\s/{s/\s*${lctid}\s+(.*)/\1/g;p}"
    fi
}

function preparePath() {
    local tpath=${1:?"Path required"}
    local hn=${2}
    if [[ ! -z "${hn}" ]] ; then
        tpath="/vz/root/${_CTID}${tpath}"
        tpath=$($SED -re 's/\$/\\$/g' -e 's/(`)/\\\1/g' <<< "${tpath}")
    fi

    local cmd="[[ ! -d '$($SED -re "s/'/\\\'\'/g" <<< "${tpath}")' ]] && mkdir -p \"$($SED -re 's/"/\\\"/g' <<< "${tpath}")\" 2>&1 && chmod 0777 \"$($SED -re 's/"/\\\"/g' <<< "${tpath}")\"";
    if [[ -z "${hn}" ]] ; then
        log "${cmd}"
        vzexecRun "${cmd}"
        return 0;
    fi
    log "${cmd}"
    /bin/bash -c "$cmd"
    return 0;
}

function migrateConfig() {
    $SED -nre '/nfs(3|4)?/p' "/vz/root/${CTID}/etc/fstab" | awk '{print $2" -fstype=nfs,nfsvers=3,nolock,udp,soft,timeo=120,retrans=20,uid=1,gid=1,_netdev,rw "$1}' >> "${MOUNTS_STORAGE}"
    $SED -i -re '/nfs(3|4)?/d' "/vz/root/${CTID}/etc/fstab"
}

function processnfs() {
    local sourceIP=${1:?"Source address required"}
    local sourceMount=${2:?"Source share name required"}
    local sourceMountUnEsc=$($SED -re 's/\\(\/|\(|\)|\]|\[|\\)/\1/g' -e 's/\s/\\\\040/g' <<< "$sourceMount")
    local destinationEsc=$($SED -re 's/\s/\\\\040/g' <<< "${_DESTINATION}" )
    local running

    isContainerRunning ${CTID} ; running=$?
    [[ $running -ne 0 ]] && {
        log "Container $CTID is not running. Mounting"
        $VZCTL mount $CTID > /dev/null 2>&1
    }

    $GREP -q "$CONTAINER_MOUNTS_STORAGE" "/vz/root/${CTID}/etc/auto.master" || dosetupUtils ${_CTID}
    $GREP -qP 'nfs(3|4)?' "/vz/root/${CTID}/etc/fstab" && migrateConfig ${_CTID}

    preparePath "${_DESTINATION}" "${_CTID}"
    local mntEntry="${destinationEsc} ${_DEFAULT_NFS_MOUNT_OPTS},uid=${USERID},gid=${GROUPID} ${sourceIP}:$($SED -re 's/\\\$/$/g' <<< "${sourceMountUnEsc}")"

    local cmdRegisterMount="echo -e \"$mntEntry\" >> ${MOUNTS_STORAGE}"

    if [[ "x$SAVE_CONFIG" == "xtrue" ]] ; then
        log "registering ${sourceIP}:${sourceMount} in ${_CTID}"
        out=$(echo -e $mntEntry >> ${MOUNTS_STORAGE})
        if [[ ! -z "${out}" ]] ; then
           log "$out"
        fi
    fi

    msg=""
    res=0
    if [[ $running -eq 0 ]] ; then
        mntcmd="systemctl restart autofs"
        vzexecRun "${mntcmd}"
    else
        log "unmounting"
        $VZCTL umount $CTID > /dev/null 2>&1
    fi
    [[ -z "$msg" ]] && echo "successfuly mounted" || echo $msg
    [[ "$res" -gt 0 ]] && return 1;
    return 0
}

function processlocal() {
    log "source: $sourceMount destination: ${_DESTINATION} ctid: ${_CTID}"
    local mntEntry="${sourceMount}\t${_DESTINATION}\tnone\trw,bind\t0\t0"

    if [ -z "$_CTID" ] ; then
        log "there is no CTID. Local mounts available only via hardnode call"
        echo "CTID required"
        return 1;
    fi

    isContainerRunning ${CTID} ; running=$?
    [[ $running -ne 0 ]] && {
        log "Container $CTID is not running. Mounting"
        $VZCTL mount $CTID > /dev/null 2>&1
    }

    OIFS=${IFS};IFS=$'\n'
    local aCurrentMounts=($($SED -nre "/none/{/bind/{s/\s*(\S+).*/\1/;p}}" "/vz/root/${_CTID}${CONTAINER_MOUNTS_STORAGE}"))
    IFS=${OIFS}

    log "${aCurrentMounts[@]}"

    if [[ ${#aCurrentMounts[@]} -gt 0 ]] ; then
        if indexOf "${aCurrentMounts[*]}" "${sourceMount}" >/dev/null; then
            log "${sourceMount} already mounted"
            echo "already mounted"
            return 0;
        fi
    else
        log "cannot get fstab entries"
    fi

    preparePath "${_DESTINATION}" 1
    preparePath "${sourceMount}" 1

    hnSrcPath=${sourceMount}
    hnDstPath=${_DESTINATION}

    if [[ "$_CTID" -gt 0 ]] ; then
        hnDstPath="/vz/root/${_CTID}${hnDstPath}"
        hnSrcPath="/vz/root/${_CTID}${hnSrcPath}"
    fi

    if [[ "$_MOVEDATA" -gt 0 ]] ; then
        $RSYNC -aP --force "${hnDstPath}/" "${hnSrcPath}/" >> $ACTIONS_LOG 2>&1
        rm -fr "${hnDstPath}/*" >> $ACTIONS_LOG 2>&1
    fi

    echo -e $mntEntry >> "/vz/root/${_CTID}${CONTAINER_MOUNTS_STORAGE}"
    echo $mntEntry
    if [[ $running -eq 0 ]] ; then
        vzexecRun "mount ${_DESTINATION}"
    else
        $VZCTL umount $CTID > /dev/null 2>&1
    fi
    res=$?
    if [[ $res -gt 0 ]]; then
        log "error mounting share"
        return 1;
    fi
    return 0;
}

function doRemount() {
    mntcmd="systemctl restart autofs"
    vzexecRun "${mntcmd}"
    return 0;
}

function dosetupUtils() {
    local issue_file="/vz/root/${CTID}/etc/issue";
    local release_files="/vz/root/${CTID}/etc/*-release";

    issue_string=$(set +f; cat $release_files $issue_file 2>/dev/null);
    OS=$(detectOS "$issue_string")
    OS_ver=$(getOSVersion "$issue_string")
    OS_ver=${OS_ver%%.*}

    #JE-25896
    if [[ "x$OS" == "xalpine" ]] ; then
        installCmd=$(installPackageCmd $OS install nfs-utils autofs)
        vzexecRun "$installCmd"
        vzexecRun "rc-update add netmount default"
        return 0
    fi
    installCmd=$(installPackageCmd $OS install autofs nfs-utils)
    vzexecRun "$installCmd"

    if [ "x$OS" == "xcentos" -a "$OS_ver" -eq "6" ] ; then
        vzexecRun "chkconfig autofs on"
    fi
    if [ "x$OS" == "xcentos" -a "$OS_ver" -eq "7" ] ; then
        $SED -i -re '/automount/d' "/vz/root/${CTID}/etc/nsswitch.conf"
        echo -e "\nautomount:  files" >> "/vz/root/${CTID}/etc/nsswitch.conf"
    fi
    echo '/- /etc/autofs.jelastic' >> "/vz/root/${CTID}/etc/auto.master"
    vzexecRun "systemctl enable autofs"
    return 0
}

function doMount() {
    [[ -z ${_SOURCE} && -z ${_DESTINATION} ]] && {
        out=$($EXEC "mount -a" 2>&1)
        if [[ ! -z "${out}" ]] ; then
            log "$out"
        fi
        return 0;
    }
    [[ -z ${_SOURCE} ]] && {
        writeJSONResponseErr "result=>4065" "message=>SOURCE required" ;
        return 1;
    }
    [[ -z ${_DESTINATION} ]] && {
        writeJSONResponseErr "result=>4066" "message=>DESTINATION required" ;
        return 1;
    }

    local mtype sourceIP sourceMount
    [ -f "/vz/root/${_CTID}${CONTAINER_MOUNTS_STORAGE}" ] || { touch "/vz/root/${_CTID}${CONTAINER_MOUNTS_STORAGE}" 2>/dev/null ; dosetupUtils ${_CTID}; }

    # parse connection string
    _SOURCE="$($SED -re 's/(\[|\]|\*|\(|\)|\$|\?|\|)/\\\1/g' <<< "$_SOURCE")"
    eval "$(echo "${_SOURCE}" | $SED -rne "s/(([Rr][Oo]|[Rr][Ww]):?([Ll][Oo][Cc][Aa][Ll]|[Nn][Ff][Ss]|[Ww][Ee][Bb][Dd][Aa][Vv]):?(\/){0,2})?([^:]+):?(.*)/atype=\2\nmtype='\3'\nsourceIP='\5'\nsourceMount='\6';/g;p" | $SED -re "s/='(.*?)'.*/=\1/g" | $SED -re "s/('|\"|\`)/\\\\\1/g" | $SED -re 's/(.*)=(.*)/\1="\2"/g')"
    mtype=${mtype,,}
    atype=${atype,,}
    atype=$($SED -re 's/;//g' <<< $atype)
    log "protocol=${mtype} source=${sourceIP} sourceMount=${sourceMount}"
    [[ -z "${mtype}" ]] && mtype="nfs"

    # for local mounts (bind)
    if [ "${mtype}" == "local" -a "x${sourceMount}" == "x" ] ; then
        sourceMount="/${sourceIP}"
    fi
    [[ -z "${sourceMount}" ]] && mountpoint="/volumes"
    [[ -z "${sourceIP}" ]] && {
        writeJSONResponseErr "result=>4067" "message=>invalid source string format." ;
        return 1;
    }
    _DEFAULT_NFS_MOUNT_OPTS="${_DEFAULT_NFS_MOUNT_OPTS},${atype}"
    msg=$(process${mtype} "${sourceIP}" "${sourceMount}"); res=$?
    [[ "$res" -gt 0 ]] && res="4111"
    writeJSONResponseOut "result=>$res" "message=>${msg}" ;
    return 0
}

function doUmount() {
    [[ -z ${_DESTINATION} && -z ${UNKNOWN_ARG} ]] && {
        writeJSONResponseErr "result=>4066" "message=>DESTINATION required" ;
        return 1;
    }
    local rescode retfunc msg="successfully unmounted";
    local running
    local -a shares

    isContainerRunning ${CTID} ; running=$?

    for i in $(seq 0 $((${#UNKNOWN_ARG[@]}-1))); do
        if [ ! -z "${UNKNOWN_ARG[$i]}" ] ; then
            [ ${#shares[*]} -gt 0 ] && shares=("${shares[@]}" "${UNKNOWN_ARG[$i]}") || shares=("${UNKNOWN_ARG[$i]}")
        fi
    done

    if [[ ! -z ${_DESTINATION} ]] ; then
        shares+=("${_DESTINATION}")
    fi

    OIFS=$IFS; IFS=$'\n'
    for i in $(seq 0 $((${#shares[*]}-1)) ) ; do
        IFS=$OIFS
        if [[ $running -eq 0 ]] ; then
            if ! vzexecRun "umount '${shares[$i]}';" ; then
                log "Performing lazy umount"
                if ! vzexecRun "umount -l '${shares[$i]}';" ; then
                    msg="$(vzexecGetLastStdErr)";
                else
                    msg="$(vzexecGetLastStdOut)";
                fi
            fi
            rescode=$(vzexecGetLastErrCode)
        else
            $VZCTL mount $CTID > /dev/null 2>&1
            rescode=0
        fi

        if [[ $FORCE_UMOUNT -eq 0 ]] ; then
             rescode=0
        fi

        if [[ "x$SAVE_CONFIG" == "xtrue" ]] ; then
            if [ $rescode -eq 0 ] ; then
                local dpath="^$($SED -re 's/\//\\\//g' <<< $($SED -re 's/\^/\\^/g' -e 's/\$/\\$/g' -e 's/(\+\{|\}|\[|\]|\(|\))/\\\1/g'  -e 's/\s/\\\\040/g' <<< "${shares[$i]}"))\s+-fstype=nfs.*";
                out=$($SED -i -re /${dpath}/d ${MOUNTS_STORAGE} 2>&1)
                [[ ! -z "${out}" ]] && log "${out}";
                retfunc="writeJSONResponseOut result=>0"
            else
                retfunc="writeJSONResponseErr result=>99"
            fi
        else
            retfunc="writeJSONResponseOut result=>$rescode"
        fi
    done

    if [[ $running -ne 0 ]] ; then
        $VZCTL umount $CTID > /dev/null 2>&1
    else
        mntcmd="systemctl restart autofs"
        vzexecRun "${mntcmd}"
    fi
    $retfunc "message=>$msg";
    return 0;
}

function doList() {
    msg=$($EXEC "mount | $SED -nre '/nfs(3|4)?/{s/(.*)\s+type.*/\1/g;p}';")
    writeJSONResponseOut "result=>0" "message=>$msg"
    return 0
}


function doExport() {
    [[ -z ${_SOURCE} ]] && {
        writeJSONResponseErr "result=>4065" "message=>SOURCE required" ;
        return 1;
    }

    vzexecSetCTID $_CTID;
    if ! vzexecRun "jem auth add -t ip -l ${_IPLIST};" ; then
        writeJSONResponseErr "result=>4030" "message=>$(vzexecGetLastStdErr)";
        return $(vzexecGetLastErrCode);
    fi
    if ! vzexecRun "mkdir -p '${_SOURCE}'; chmod 0777 '${_SOURCE}';" ; then
        writeJSONResponseErr "result=>4030" "message=>$(vzexecGetLastStdErr)";
        return $(vzexecGetLastErrCode);
    fi
    if ! vzexecRun "exportfs -ra;" ; then
        writeJSONResponseErr "result=>4030" "message=>$(vzexecGetLastStdErr)";
        return $(vzexecGetLastErrCode);
    fi
    writeJSONResponseOut "result=>0" "message=>success";
    return 0;
}

function describeExport() {
    echo "Export";
}

function describeExportParameters() {
    echo "-o|--ctid <ctid> -s|--source <spath>";
}

function describeExportOptions() {
    echo "-s|--source: source path";
    echo "-o|--ctid: container ID";
}

function describeList() {
    echo "List mount points";
}

function describeListParameters() {
    echo "-o|--ctid <ctid>";
}

function describeListOptions() {
    echo "-o|--ctid: container ID";
}

function describeMount() {
    echo "Mount source to destination";
}

function describeMountParameters() {
    echo "-o|--ctid <ctid> -s|--source <spath> -d|--destination <dpath>";
}

function describeMountOptions() {
    echo "-o|--ctid: container ID";
    echo "-s|--source: source path";
    echo "-d|--destination: destination path";
}

function describeUmount() {
    echo "Umount destination";
}

function describeUmountParameters() {
    echo "-o|--ctid <ctid> -d|--destination  <dpath>";
}

function describeUmountOptions() {
    echo "-o|--ctid: container ID ";
    echo "-d|--destination: destination path";
}

