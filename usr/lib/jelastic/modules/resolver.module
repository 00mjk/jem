#!/bin/bash
# Copyright 2015 Jelastic, Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

inherit default os net;
include log;

DESCRIPTION="Manipulate SLB configuration";
VERSION="1.0"
DEFAULT_ACTION="Usage";

SLB_ZONES_CONFIG_PATH='/etc/jelastic/zones';
SLB_NAMED_MAIN_CONFIG='/etc/named.conf';

#!!!!!
#!!!!! ACTUAL VARIABLES STORED IN OVERRIDE LIB {{{
SLB_MYSQL_PASSWORD="${SLB_MYSQL_PASSWORD:="1mM36PNJr6"}"
SLB_MYSQL_USER="${SLB_MYSQL_USER:="hivext_named"}"
SLB_MYSQL_HOST="${SLB_MYSQL_HOST:="127.0.0.1"}"
#}}}

#ZONE_TYPE parameter specifies type of zone to Add
#Valid values: internal, external, both
ZONE_TYPE='both';

$PROGRAM 'grep'

function checkParams() {
    local params=($*)
    local result=""
    for p in "${params[*]}" ; do
        eval "[[ -z \"\$$p\" ]] && { result=\"$p $result\";}"
    done
    [[ -z "$result" ]] && return 0;
    return 1;
}

function onModLoadCallback() {
    log "Preload callback";

    local temp=`getopt -o n:,t:: -l name:,type:: -- "$@" 2>/dev/null`;
    [[ $? != 0 ]] && die -q "Terminating...";
    eval set -- "$temp";

    while true ; do
        case "$1" in
            -n | --name)
                shift;
                ZONE_NAME=$1;
                shift;
                ;;
            -t | --type)
                shift;
                ZONE_TYPE=$1;
                shift;
                ;;
            --)
                shift;
                break;
                ;;
        esac;
    done;
    for arg do UNKNOWN_ARG+=($arg) ; done
    log "${UNKNOWN_ARG[*]}"
}

function restartNamed() {
    #Get random value for timeout #JE-25096
    timeout=$((RANDOM%10))
    log "Waiting $timeout to restart"
    sleep $timeout
    out=$(/etc/init.d/named restart)
    log "restarting named: ${out}"
}

function doAddZone() {
    local requiredParqams=("ZONE_NAME")
    local msg=$(checkParams ${requiredParqams[@]})
    [[ ! -z "${msg}" ]] && { writeJSONResponseErr "result=>4099" "message=>Missing param $msg" ; return 99; }
    [[ ! -e "$SLB_NAMED_MAIN_CONFIG" ]] && {
        writeJSONResponseErr "result=>4099" "message=>SLB DNS configuration file not found $SLB_NAMED_MAIN_CONFIG" ;
        return 99;
    }
    [[ ! -d "$SLB_ZONES_CONFIG_PATH" ]] && mkdir "$SLB_ZONES_CONFIG_PATH"

    #is Zone exists in main config?
    if $GREP -qo "zone \"{ZONE_NAME}.\"" "$SLB_NAMED_MAIN_CONFIG" ; then
        writeJSONResponseErr "result=>4099" "message=>Zone ${ZONE_NAME} already exists in $SLB_NAMED_MAIN_CONFIG" ;
        return 99;
    fi
    EXTERNAL_ZONE_FILENAME="${SLB_ZONES_CONFIG_PATH}/${ZONE_NAME}.external"
    INTERNAL_ZONE_FILENAME="${SLB_ZONES_CONFIG_PATH}/${ZONE_NAME}.internal"

    echo "$(renderTemplate "$ZONE_EXTERNAL_TPL")" > "$EXTERNAL_ZONE_FILENAME"
    chown named:named "$EXTERNAL_ZONE_FILENAME"
    echo "$(renderTemplate "$ZONE_INTERNAL_TPL")" > "$INTERNAL_ZONE_FILENAME"
    chown named:named "$INTERNAL_ZONE_FILENAME"

    $SED -i -re "/EXTERNAL ZONES/a\include \"$EXTERNAL_ZONE_FILENAME\";" "$SLB_NAMED_MAIN_CONFIG"
    $SED -i -re "/INTERNAL ZONES/a\include \"$INTERNAL_ZONE_FILENAME\";" "$SLB_NAMED_MAIN_CONFIG"

    restartNamed
    return 0;
}

function doFixZones() {
    $PROGRAM 'mysql'
    local requiredParqams=("SLB_MYSQL_PASSWORD", "SLB_MYSQL_USER")
    local msg=$(checkParams ${requiredParqams[@]})
    [[ ! -z "${msg}" ]] && { writeJSONResponseErr "result=>4099" "message=>Missing param $msg" ; return 99; }

    _QUERY='select name from hivext_jelastic.dns_internal where rdtype="SOA";'
    OLD_IFS=$IFS; IFS=$'\n';
    ZONES=($(${MYSQL} -u${SLB_MYSQL_USER} -p${SLB_MYSQL_PASSWORD} -BNse "${_QUERY}"))
    IFS=$OLD_IFS
    for zone in ${ZONES[*]} ; do
        if ! $GREP -qP '(\/|")'${zone} "$SLB_NAMED_MAIN_CONFIG" ; then
            ZONE_NAME=$zone
            out=$(doAddZone)
            log $out
        fi
    done
}

function doRemoveZone() {
    local requiredParqams=("ZONE_NAME")
    local msg=$(checkParams ${requiredParqams[@]})
    [[ ! -z "${msg}" ]] && { writeJSONResponseErr "result=>4099" "message=>Missing param $msg" ; return 99; }
    [[ ! -e "$SLB_NAMED_MAIN_CONFIG" ]] && {
        writeJSONResponseErr "result=>4099" "message=>SLB DNS configuration file not found $SLB_NAMED_MAIN_CONFIG" ;
        return 99;
    }

    EXTERNAL_ZONE_FILENAME="${SLB_ZONES_CONFIG_PATH}/${ZONE_NAME}.external"
    INTERNAL_ZONE_FILENAME="${SLB_ZONES_CONFIG_PATH}/${ZONE_NAME}.internal"
    $SED -i -re "/\"${EXTERNAL_ZONE_FILENAME//\//\\/}\"/d" "$SLB_NAMED_MAIN_CONFIG"
    $SED -i -re "/\"${INTERNAL_ZONE_FILENAME//\//\\/}\"/d" "$SLB_NAMED_MAIN_CONFIG"

    [[ -e "${EXTERNAL_ZONE_FILENAME}" ]] && rm "${EXTERNAL_ZONE_FILENAME}"
    [[ -e "${INTERNAL_ZONE_FILENAME}" ]] && rm "${INTERNAL_ZONE_FILENAME}"

    restartNamed
    return 0;
}

defineBigInline ZONE_EXTERNAL_TPL <<'EOF'
    zone "${ZONE_NAME}." {
        type master;
        database "mysqldb hivext_jelastic dns_external_view $SLB_MYSQL_HOST $SLB_MYSQL_USER $SLB_MYSQL_PASSWORD";
        journal "/var/named/dynamic/$ZONE_NAME.jnl";
    };
EOF

defineBigInline ZONE_INTERNAL_TPL <<'EOF'
    zone "${ZONE_NAME}." {
        type master;
        database "mysqldb hivext_jelastic dns_internal_view $SLB_MYSQL_HOST $SLB_MYSQL_USER $SLB_MYSQL_PASSWORD";
        journal "/var/named/dynamic/$ZONE_NAME.jnl";
    };
EOF
