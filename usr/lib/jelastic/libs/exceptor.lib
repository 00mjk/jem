#!/bin/bash

# Copyright 2015 Jelastic, Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[ -n "${EXCEPTORLIB_VERSION:-}" ] && return 0;
EXCEPTORLIB_VERSION="0.1";

inherit fsutils;
include output;

$PROGRAM 'curl';
$PROGRAM 'gzip';
$PROGRAM 'grep';
$PROGRAM 'file';
$PROGRAM 'awk';
$PROGRAM 'unzip';
$PROGRAM 'sed';

function ensureDiskSpaceIsOK() {
    local disk_space_usage_critical_state=97;
    local disk_inode_usage_critical_state=97;
    local fstype="$(getFSType '/')";
    local disk_space_usage_percentage=$(df -l -h 2>/dev/null  | $GREP "/$" | $GREP -o [[:alnum:]]*% | $SED  's/%//g' | head -n 1);
    local disk_inode_usage_percentage=$(df -l -i 2>/dev/null  | $GREP "/$" | $GREP -o [[:alnum:]]*% | $SED  's/%//g' | head -n 1);
    [ ${disk_space_usage_percentage} -lt ${disk_space_usage_critical_state} ] || { writeJSONResponseErr "result=>4075" "message=>No free diskspace"; die -q; }

    [[ "${fstype}" == "reiserfs" ]] && return 0;
    [ ${disk_inode_usage_percentage} -lt ${disk_inode_usage_critical_state} ] || { writeJSONResponseErr "result=>4076" "message=>No free inodes"; die -q; }
    return 0;
}

function ensureFileCanBeUncompressed(){
    VERBOSE=1;
    local fileToUncompress=$1;
    local uncompressed_zip_size=0;
    [ -z ${resource_data_dize} ] && { resource_data_dize=0; freebytesleft=$(( 1024 *  $(df -l 2>/dev/null | $GREP "/$" | $AWK '{ print $4 }' | head -n 1 2>/dev/null)-1024*1024)); }
    local uncompressed_size;

    mimeType=$($FILE --mime-type "${fileToUncompress}" | $AWK '{print $2}')

    case ${mimeType} in
        "application/x-bzip2")
            uncompressed_size=$(( $($TAR -tvjf "$1" | $AWK '{i+=$3} END{print i}')+1048576))
        ;;
        "application/jar" | "application/zip")
            uncompressed_size=$(( $($UNZIP -Z "$1" | $GREP uncompress | $AWK '{ print $3 }' | tail -n 1 )+1048576))
        ;;
        "application/x-gzip")
            uncompressed_size=$(( $($GZIP -l "$1" | $AWK '{ print $2 }' | tail -n 1 )+1048576))
        ;;
        "application/x-tar")
            uncompressed_size=$(( $($TAR -tvf "$1" | $AWK '{i+=$3} END{print i}')+1048576))
        ;;
        *)
            log "Unknown mime-type  file ${fileToUncompress}";

    esac

    [ -z ${uncompressed_size} ] && uncompressed_size=0;
    let "total_deploy_size = $uncompressed_size + $resource_data_dize";
    [ ${total_deploy_size} -lt  ${freebytesleft} ] || { clearCache; writeJSONResponseErr "result=>4075" "message=>No free diskspace"; die -q; }
    return 0;
}

function ensureFileCanBeDownloaded(){
    local resource_url=$1;
    resource_data_dize=$($CURL -s --head $resource_url | $GREP "Content-Length" | $AWK -F ":" '{ print $2 }'| $SED 's/[^0-9]//g');
    freebytesleft=$(( 1024 *  $(df -l | $GREP "/$" | $AWK '{ print $4 }' | head -n 1)-1024*1024));
    [ -z ${resource_data_dize} ] && return 0;
    [ ${resource_data_dize} -lt  ${freebytesleft} ] || { writeJSONResponseErr "result=>4075" "message=>No free diskspace"; die -q; }
    return 0;
}

function getPackageName() {
    if [ -f "$package_url" ]; then
        package_name=$(basename "${package_url}")
        package_path=$(dirname "${package_url}")
    elif [[ "${package_url}" =~ file://* ]]; then
        package_name=$(basename "${package_url:7}")
        package_path=$(dirname "${package_url:7}")
        [ -f "${package_path}/${package_name}" ] || { writeJSONResponseErr "result=>4078" "message=>Error loading file from URL"; die -q; }
    else
	createDownloadsDir;
        ensureFileCanBeDownloaded $package_url;
        $WGET --no-check-certificate --content-disposition --directory-prefix="$DOWNLOADS" $package_url >> $ACTIONS_LOG 2>&1 || { writeJSONResponseErr "result=>4078" "message=>Error loading file from URL"; die -q; }
        package_name="$(ls ${DOWNLOADS})";
        package_path=${DOWNLOADS};
        [ ! -s "${package_path}/${package_name}" ] && {
            set -f
            rm -f "${package_name}";
            set +f
            writeJSONResponseErr "result=>4078" "message=>Error loading file from URL";
            die -q;
        }
    fi
}

function createDownloadsDir() {
    [[ "$UID" != '0' ]] && SUDO="sudo" || SUDO=""
    [ ! -d "$DOWNLOADS" ] && ${SUDO} /usr/bin/mkdir -p ${DOWNLOADS}
    ${SUDO} /usr/bin/setfacl -Rm g:ssh-access:xwr,d:g:ssh-access:xwr,d:u::xwr ${DOWNLOADS}
}


function clearCache(){
    if [[ -d "$DOWNLOADS" ]]
    then
       shopt -s dotglob;
       set -f
       rm -Rf ${DOWNLOADS}/*;
       set +f
       shopt -u dotglob;
    fi
}

