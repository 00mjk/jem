#!/bin/bash

# Copyright 2015 Jelastic, Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[ -n "${HOOKSLIB_VERSION:-}" ] && return 0;
HOOKSLIB_VERSION="0.1";

HOOKS_DIR="/var/lib/jelastic/hooks";

if [ -f /etc/jelastic/redeploy.conf ] && [ -z $(grep ${HOOKS_DIR} /etc/jelastic/redeploy.conf) ]; then
    echo ${HOOKS_DIR} >> /etc/jelastic/redeploy.conf
fi

function getHooksLogName()
{
    [ -n "${VCS_UPDATE_LOG}" ] && HOOKS_LOG="$(dirname ${VCS_UPDATE_LOG})/hooks.log";

    case ${COMPUTE_TYPE} in
        tomcat)
                HOOKS_LOG="/opt/tomcat/logs/hooks.log";
        ;;
        jetty)
                HOOKS_LOG="/opt/jetty/logs/hooks.log";
        ;;
        glassfish|payara)
                HOOKS_LOG="/var/log/hooks.log";
        ;;
    esac

    [ -z "${HOOKS_LOG}" ] && HOOKS_LOG="${ACTIONS_LOG}";    
}

function applyHook(){
    target="$1"
    hook="$2"
    if [ -f "$HOOKS_DIR/${hook}_${target}.sh" ]; then
        getHooksLogName;
        touch ${HOOKS_LOG};
        resultFile=$(mktemp); export resultFile;
        chown ${DATA_OWNER} ${HOOKS_LOG} ${resultFile};
        [ "x${COMPUTE_TYPE}" == "xmaven" ] && local WRITE_OUTPUT_TO="${LOG_DIR}/${PROJECT_NAME}_build.log" || local WRITE_OUTPUT_TO="${ACTIONS_LOG}";
        echo -en "$(date) Applying ${hook} hook for ${target} \n" | tee -a ${WRITE_OUTPUT_TO} >> ${HOOKS_LOG};
        chmod +x "$HOOKS_DIR/${hook}_${target}.sh";
        runuser -l jelastic -c "$HOOKS_DIR/${hook}_${target}.sh; echo \$?>${resultFile}" >> ${HOOKS_LOG} | tee -a ${WRITE_OUTPUT_TO}
        result=$(cat ${resultFile}); rm -f ${resultFile};
        if [ "${result}" == "0" ]; then
            echo -e "${hook} hook applied successfully\n" | tee -a ${WRITE_OUTPUT_TO} >> ${HOOKS_LOG};
        else
            echo -e "${hook} hook execution failed. Result is ${result}\n" | tee -a ${WRITE_OUTPUT_TO} >> ${HOOKS_LOG};
        fi
        return ${result}
    else
        return 0;
    fi
}

function renameHooks(){
    target="$1"
    old_target="$2"
    [ ! -d ${HOOKS_DIR} ] && return 0;
    hooks_to_rename=$(ls ${HOOKS_DIR}|grep ${old_target})
    for i in ${hooks_to_rename}
    do
        mv -f ${HOOKS_DIR}/$i ${HOOKS_DIR}/$(echo $i|cut -d"_" -f1)_${target}.sh;
    done
}

function removeHooks(){
    getHooksLogName;
    target="$1"
    rm -f "$HOOKS_DIR/*_${target}.sh" && echo -e "$(date) All hooks are removed for ${target}" >> ${HOOKS_LOG} || return 0;
}
